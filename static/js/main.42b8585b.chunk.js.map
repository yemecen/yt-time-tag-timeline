{"version":3,"sources":["components/Nav.js","components/Tag.js","components/Video.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","href","width","height","src","Tag","tag","onPlayVideo","match","OverlayTrigger","overlay","Tooltip","id","Button","variant","size","onClick","event","preventDefault","console","log","target","innerText","time","hour","minute","second","split","length","parseInt","timeToSecond","Video","video","useState","player","setPlayer","comments","setComments","seekTo","getOnePageComment","videoId","pageToken","a","url","process","join","fetch","response","json","useEffect","then","ytData","items","onReady","containerClassName","snippet","channelTitle","undefined","map","comment","topLevelComment","textOriginal","App","videos","setVideos","getSearchVideo","q","type","placeholder","aria-label","aria-describedby","onChange","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAmBeA,G,MAjBH,WAER,OACI,qBAAKC,UAAU,MAAf,SACI,qBAAKA,UAAU,8CAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,eACA,qBAAKC,MAAM,MAAMC,OAAO,MACpBC,IAAI,2FACJJ,UAAU,6E,wBCgCnBK,EAxCH,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,YAyBhB,OACI,mCAC6C,MAAxCD,EAAIE,MAAM,4BAAuC,cAACC,EAAA,EAAD,CAC9CC,QACI,cAACC,EAAA,EAAD,CAASC,GAAI,iBAAb,SACKN,IAHqC,SAM9C,cAACO,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,KAAK,KAAKC,QAfrC,SAACC,GAChBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,WAEzBf,EApBiB,SAACgB,GAClB,IAAIC,EAAMC,EAAQC,EAAS,IAY3B,OAV+B,IAA3BH,EAAKI,MAAM,KAAKC,QAChBJ,EAAOK,SAAS,KAChBJ,EAASI,SAASN,EAAKI,MAAM,KAAK,KAAO,EACzCD,EAASG,SAASN,EAAKI,MAAM,KAAK,KAAO,IAEzCH,EAAOK,SAASN,EAAKI,MAAM,KAAK,KAAO,EACvCF,EAASI,SAASN,EAAKI,MAAM,KAAK,KAAO,EACzCD,EAASG,SAASN,EAAKI,MAAM,KAAK,KAAO,GAG9B,KAAPH,EAAyB,GAATC,EAAeC,EAO3BI,CAAab,EAAMI,OAAOC,aAW9B,SAAkEhB,EAAIE,MAAM,kC,QC+C7EuB,EA/ED,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACGC,mBAAS,MADZ,mBAClBC,EADkB,KACVC,EADU,OAEOF,mBAAS,IAFhB,mBAElBG,EAFkB,KAERC,EAFQ,KAUnB9B,EAAc,SAACmB,GAEjBQ,EAAOI,OAAOZ,IAUZa,EAAiB,uCAAG,WAAOC,EAASC,GAAhB,mBAAAC,EAAA,6DAChBC,EAAM,CACR,wDACA,uBACA,gBAHQ,kBAIGH,GAJH,cApBDI,2CAoBC,oBAMKH,IACfI,KAAK,KARe,SAUCC,MAAMH,GAVP,cAUhBI,EAVgB,gBAWHA,EAASC,OAXN,cAWhBA,EAXgB,OAYtB7B,QAAQC,IAAI4B,GAZU,kBAafA,GAbe,2CAAH,wDAoCvB,OALAC,qBAAU,WACNV,EAAkBP,EAAMpB,GAAG4B,QAAS,IAAIU,MAAK,SAACC,GAAad,EAAYc,EAAOC,OAAQjC,QAAQC,IAAI,cAAgB+B,MAClHhC,QAAQC,IAAI,YACb,IAGC,qBAAKpB,UAAU,MAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,cAAC,IAAD,CAASwC,QAASR,EAAMpB,GAAG4B,QAASa,QAzDpC,SAACpC,GACbkB,EAAUlB,EAAMI,QAChBF,QAAQC,IAAIH,EAAMI,SAuDgDiC,mBAAoB,uBAE9E,sBAAKtD,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BgC,EAAMuB,QAAQC,eAC1C,mBAAGxD,UAAU,YAAb,cAEmByD,GAAXrB,GACAA,EAASsB,KAAI,SAACC,GAAD,OAAc,cAAC,EAAD,CAAsBpD,YAAaA,EAAaD,IAAKqD,EAAQJ,QAAQK,gBAAgBL,QAAQM,cAAnFF,EAAQ/C,kBCL1DkD,MAhEf,WAAgB,IAAD,EAEe7B,qBAFf,mBAEN8B,EAFM,KAEEC,EAFF,KAKbf,oBAAS,sBAAC,sBAAAP,EAAA,sDAMRvB,QAAQC,IAAR,qCAA0C2C,SAC3BN,IAAXM,GAAsB5C,QAAQC,IAAR,gCAAqC2C,EAAOnC,SAP9D,2CASP,IAEH,IAOMqC,EAAc,uCAAG,WAAOC,EAAGzB,GAAV,mBAAAC,EAAA,6DACfC,EAAM,CACV,oDACA,eACA,eAHU,YAILuB,GAJK,cArBCtB,2CAqBD,oBAMGH,IACbI,KAAK,KARc,SAUEC,MAAMH,GAVR,cAUfI,EAVe,gBAWFA,EAASC,OAXP,cAWfA,EAXe,OAYrB7B,QAAQC,IAAI4B,GAZS,kBAadA,GAbc,2CAAH,wDAgBpB,OACE,sBAAKhD,UAAU,YAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,wBAAf,SACE,qBAAKA,UAAU,iEAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,uBAAOmE,KAAK,OAAOnE,UAAU,eAAeoE,YAAY,SAASC,aAAW,SAASC,mBAAiB,eAAeC,SAhC9G,SAACtD,GAEhBA,EAAMC,iBAEN+C,EAAehD,EAAMI,OAAOmD,MAAO,IAAItB,MAAK,SAACC,GAAaa,EAAUb,EAAOC,mBAiCzE,qBAAKpD,UAAU,uCAAf,cAEeyD,IAAXM,GAAwBA,EAAOL,KAAI,SAAC1B,GAAD,OACjC,cAAC,EAAD,CAA8BA,MAAOA,GAAzBA,EAAMpB,GAAG4B,kBChDlBiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.42b8585b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Nav = () => {\r\n\r\n    return (\r\n        <div className=\"col\">\r\n            <nav className=\"navbar navbar-dark bg-primary rounded-start\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"#\">.</a>\r\n                    <img width=\"100\" height=\"100\"\r\n                        src=\"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/default-avatar.png\"\r\n                        className=\"position-absolute top-50 end-0 translate-middle-y img-thumbnail\" />\r\n                </div>\r\n            </nav>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nconst Tag = ({ tag, onPlayVideo }) => {\r\n\r\n    const timeToSecond = (time) => {\r\n        let hour, minute, second = \"0\";\r\n\r\n        if (time.split(\":\").length === 2) {\r\n            hour = parseInt(\"0\");\r\n            minute = parseInt(time.split(\":\")[0]) || 0;\r\n            second = parseInt(time.split(\":\")[1]) || 0;\r\n        } else {\r\n            hour = parseInt(time.split(\":\")[0]) || 0;\r\n            minute = parseInt(time.split(\":\")[0]) || 0;\r\n            second = parseInt(time.split(\":\")[1]) || 0;\r\n        }\r\n\r\n        return (hour * 3600) + (minute * 60) + second;\r\n    }\r\n\r\n    const startVideo = (event) => {\r\n        event.preventDefault();\r\n        console.log(event.target.innerText);\r\n\r\n        onPlayVideo(timeToSecond(event.target.innerText));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {tag.match(/[0-5]?[0-9]:[0-5][0-9]/g) != null && (<OverlayTrigger\r\n                overlay={\r\n                    <Tooltip id={'tooltip-bottom'}>\r\n                        {tag}\r\n                    </Tooltip>\r\n                }>\r\n                <Button variant=\"outline-primary\" size=\"sm\" onClick={startVideo}>{tag.match(/[0-5]?[0-9]:[0-5][0-9]/g)}</Button>\r\n            </OverlayTrigger>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tag;","import React, { useState, useEffect } from 'react';\r\nimport Tag from './Tag';\r\nimport YouTube from 'react-youtube';\r\n\r\nconst Video = ({ video }) => {\r\n    const [player, setPlayer] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    const apiKey = process.env.REACT_APP_API_TOKEN;\r\n\r\n    const onReady = (event) => {\r\n        setPlayer(event.target);\r\n        console.log(event.target);\r\n    };\r\n\r\n    const onPlayVideo = (second) => {\r\n        //player.playVideo();\r\n        player.seekTo(second);\r\n    };\r\n\r\n    const opts = {\r\n        frameborder: '0',\r\n        playerVars: {\r\n            autoplay: 0,\r\n        },\r\n    };\r\n\r\n    const getOnePageComment = async (videoId, pageToken) => {\r\n        const url = [\r\n            'https://www.googleapis.com/youtube/v3/commentThreads?',\r\n            'part=snippet,replies',\r\n            'maxResults=10',\r\n            `videoId=${videoId}`,\r\n            `key=${apiKey}`,\r\n            `pageToken=${pageToken}`,\r\n        ].join('&');\r\n\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n        console.log(json);\r\n        return json;\r\n    };\r\n\r\n    const getAllPagesComments = (videoId, pageToken) => {\r\n        // get the comments for the first page by making simple API call\r\n        return getOnePageComment(videoId, pageToken)\r\n            .then((result) => {\r\n                const comments = result.items;\r\n\r\n                // Base case: this is the last page\r\n                if (!result.nextPageToken) return comments;\r\n\r\n                // Recursive step: get the rest of the pages, then concat it\r\n                return getAllPagesComments(videoId, result.nextPageToken)\r\n                    .then(restOfVideoIds => comments.concat(restOfVideoIds));\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getOnePageComment(video.id.videoId, '').then((ytData) => { setComments(ytData.items); console.log(\"comments==>\" + ytData); });\r\n        console.log(\"effect\");\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"card h-100\">\r\n                <div className=\"ratio ratio-16x9\">\r\n                    <YouTube videoId={video.id.videoId} onReady={onReady} containerClassName={\"youtubeContainer\"} />\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{video.snippet.channelTitle}</h5>\r\n                    <p className=\"card-text\">\r\n                        {   //console.log(comments)\r\n                            comments !=undefined &&\r\n                            comments.map((comment) => (<Tag key={comment.id} onPlayVideo={onPlayVideo} tag={comment.snippet.topLevelComment.snippet.textOriginal} />))\r\n                            //<Tag onPlayVideo={onPlayVideo} tag={\"C1 V1 comment 00:10\"} />//ge√ßici\r\n                        }\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { Nav, Video } from './components';\r\n\r\nfunction App() {\r\n\r\n  const [videos, setVideos] = useState();\r\n  const apiKey = process.env.REACT_APP_API_TOKEN;\r\n\r\n  useEffect(async () => {\r\n\r\n    /*const response = await fetch('https://my-json-server.typicode.com/yemecen/jsonserve/videos');\r\n    const data = await response.json();\r\n\r\n    setVideos(data);*/\r\n    console.log(`Videos State Type : ${typeof videos}`);\r\n    if (videos !== undefined) console.log(`Videos State Length : ${videos.length}`);\r\n\r\n  }, []);\r\n\r\n  const onChange = (event) => {\r\n\r\n    event.preventDefault();\r\n\r\n    getSearchVideo(event.target.value, '').then((ytData) => { setVideos(ytData.items) });\r\n  }\r\n\r\n  const getSearchVideo = async (q, pageToken) => {\r\n    const url = [\r\n      'https://youtube.googleapis.com/youtube/v3/search?',\r\n      'part=snippet',\r\n      'maxResults=3',\r\n      `q=${q}`,\r\n      `key=${apiKey}`,\r\n      `pageToken=${pageToken}`,\r\n    ].join('&');\r\n\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    console.log(json)\r\n    return json;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row p-1 mt-3 mb-2\">\r\n        <Nav />\r\n      </div>\r\n\r\n      <div className=\"row position-relative\">\r\n        <div className=\"col-md-5 g-4 position-absolute top-0 start-50 translate-middle\">\r\n          <div className=\"input-group mb-2\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"basic-addon1\" onChange={onChange} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row row-cols-1 row-cols-md-3 g-4 p-5\">\r\n        {//console.log(`Videos State : ${typeof videos}`)\r\n          videos !== undefined && videos.map((video) => (\r\n            <Video key={video.id.videoId} video={video} />\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}